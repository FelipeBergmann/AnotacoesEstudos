# Xamarin
## Curso Alura
### Xamarin no visual studio

#POSICIONANDO CONTROLES NA TELA#

*****Stacklayout:*****
  empilha componentes na tela
Ex:
  <StackLayout> 
    <label Text="Texto1"/>
  </StackLayout>
  
  
-------------------------------------------------------------------------------------------------------------------------


*****Grid:*****
  Permite posicionar itens na tela em linhas e colunas
	VerticalOptions = default Fill (preenche todo o espaço da tela)
		-Alterado para Start ( utiliza do topo para baixo apenas o espaço necessário)
	Necessário definir em seções especiais o número de colunas e linhas
  Necessário definir na tag do controle qual linha e coluna ele deverá ser adicionado
  
<Grid VerticalOptions="Start">
	<Grid.ColumnDefinitions>
		<ColumnDefinition></ColumnDefinition>
		<ColumnDefinition></ColumnDefinition>
	</Grid.ColumnDefinitions>
	
	<Grid.RowDefinition>
		<RowDefinition></RowDefinition>
		<RowDefinition></RowDefinition>
	</Grid.RowDefinition>
	<label Grid.Row="0"   Grid.Column="0" Text="Texto1"/>
	<labe  Grid.Row="0"   Grid.Column="1" l Text="Texto2"/>
	<label Grid.Row="1"    Grid.Column="0"  Text="Texto3"/>
	<label Grid.Row="1"   Grid.Column="1"  Text="Texto4"/>
</Grid>


-------------------------------------------------------------------------------------------------------------------------


*****ListView:*****
  O diferentão, não se controla muita coisa pelo XAML. 
	Com o nome definido no xaml é possível acessar este controle no código da tela (c#)
  
<ListView x:Name="ListViewTeste">

</ListView>
______________________________________
C#
Public MainPage()
{
	InitializeComponent();
	
	ListViewTeste.ItemSource = new string[]
	{
		"Texto 1",
		"Texto 2"
	};

}


-------------------------------------------------------------------------------------------------------------------------


*****ListView com Binding*****
O binding pode ser feito apontando o ItemSource no codebehind ou na prórpia view, não alterado o template do listview
Ex:
	<ListView x:Name="ListViewTeste">
		<ListView.ItemTemplate>
			<DataTemplate>
				<ViewCell>
					<ViewCell.View>
						<Label Text="{Biding Nome}"></Label>
					</ViewCell.View>
				</ViewCell>
			</DataTemplate>
		</ListView.ItemTemplate>
	</ListView>


c#
_____________________________________
//criar a classe do objeto
Public class Teste
{
	Public string Nome {get;set;}
	Public int Id {get;set;}

}

//main

Public List<Teste> ListTeste {get;set;}

//construtor main
This.ListTeste =  new List<Teste>
{
	New Teste{Nome = "Texto1", Id = 1},
	New Teste{Nome = "Texto2", Id = 2}

}

ListViewTeste.ItemSource = this.ListTeste;

_____________________________________________
Ex2:
Biding do item source no xaml
<ListView x:Name="ListViewTeste" ItemSource="{Biding Testes}">
	<ListView.ItemTemplate>
		<DataTemplate>
			<ViewCell>
				<ViewCell.View>
					<Label Text="{Biding Nome}"></Label>
				</ViewCell.View>
			</ViewCell>
		</DataTemplate>
	</ListView.ItemTemplate>
</ListView>
_______________________________________________
c#

	//criar a classe do objeto
	Public class Teste
	{
		Public string Nome {get;set;}
		Public int Id {get;set;}

	}

	//main

	Public List<Teste> ListTeste {get;set;}

	//construtor main
	This.ListTeste =  new List<Teste>
	{
		New Teste{Nome = "Texto1", Id = 1},
		New Teste{Nome = "Texto2", Id = 2}

	}

	//a configuração do item source é removida
	//ListViewTeste.ItemSource = this.ListTeste;
	//é configurado o biding context
	This.BidingContext =  this;


-------------------------------------------------------------------------------------------------------------------------


Para quebrar um label em vários pedaços para formatar string , é necessário utilizar spans
**O componente span não tem suporte ao Binder**

<ListView x:Name="ListViewTeste" ItemSource="{Biding Testes}">
	<ListView.ItemTemplate>
		<DataTemplate>
			<ViewCell>
				<ViewCell.View>
					<Label>
						<Label.FormattedText>
							<FormattedString>
								<FormattedString.Spans>
									<Span Text="Texto1" FontSize="20"> </Span>
									<Span Text=" - "></Span>
									<Span Text="ID: 1" FontAttributes="Bold"></Span>
								</FormattedString.Spans>
							</FormattedString>
						</Label.FormattedText>
					</Label>
				</ViewCell.View>
			</ViewCell>
		</DataTemplate>
	</ListView.ItemTemplate>
</ListView>


-------------------------------------------------------------------------------------------------------------------------


*****StackLayout Horizontal*****

<ListView x:Name="ListViewTeste" ItemSource="{Biding Testes}">
	<ListView.ItemTemplate>
		<DataTemplate>
			<ViewCell>
				<ViewCell.View>
					<StackLayout Orientation="Horizontal">
						<Label Text="Texto1" FontSize="20" VerticalTextAligment="Center"> </Label >
						<Label Text=" - "  VerticalTextAligment="Center"></Label >
						<Label Text="ID: 1" FontAttributes="Bold"  VerticalTextAligment="Center"></Label >
					</StackLayout>
				</ViewCell.View>
			</ViewCell>
		</DataTemplate>
	</ListView.ItemTemplate>
</ListView>


-------------------------------------------------------------------------------------------------------------------------


****Margem****
 - Adicionada ao listView ListViewTeste
<ListView x:Name="ListViewTeste" ItemSource="{Biding Testes}" Margin="25">
	<ListView.ItemTemplate>
		<DataTemplate>
			<ViewCell>
				<ViewCell.View>
					<StackLayout Orientation="Horizontal">
						<Label Text="Texto1" FontSize="20" VerticalTextAligment="Center"> </Label >
						<Label Text=" - "  VerticalTextAligment="Center"></Label >
						<Label Text="ID: 1" FontAttributes="Bold"  VerticalTextAligment="Center"></Label >
					</StackLayout>
				</ViewCell.View>
			</ViewCell>
		</DataTemplate>
	</ListView.ItemTemplate>
</ListView>
